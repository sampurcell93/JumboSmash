// Generated by CoffeeScript 1.6.3
(function() {
  var app, cc, checkAuth, db, express, temp, url, _;

  express = require('express');

  url = require('url');

  _ = require('underscore');

  app = express();

  app.listen(process.env.PORT || 4040);

  checkAuth = function(req, res, next) {
    req.user = "samuel.purcell@tufts.edu";
    req.user = "grace.buchloh@tufts.edu";
    return db.users.findOne({
      email: req.user
    }, function(err, user) {
      req.user = user;
      return next();
    });
  };

  cc = function(arg) {
    return console.log(arg);
  };

  temp = "mongodb://heroku:192be8556a80da2574b29c0a48b37360@ethan.mongohq.com:10058/app17903256";

  db = require("mongojs").connect(temp || process.env.MONGOHQ_URL || "JumboSmash", ['users']);

  app.configure(function() {
    app.use(express.logger('dev'));
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    return app.use(express["static"](__dirname + '/public'));
  });

  app.get("/signup", function(req, res, next) {
    return res.render("signup");
  });

  app.post("/signup", function(req, res, next) {
    var click, email, year;
    click = req.body.submit_login;
    email = req.body.email.toLowerCase();
    year = parseInt(req.body.grad_year);
    if (typeof click !== "undefined") {
      db.users.find({
        email: email
      }, function(err, users) {
        if (users.length) {
          return res.redirect("/signup?msg=existing");
        } else {
          db.users.insert({
            email: email
          }, {
            $set: {
              email: email,
              grad_year: year
            }
          }, function(err, inserted) {
            if (err || !inserted) {
              return res.redirect("/signup?msg=signup_wrong");
            } else {

            }
          });
          return res.redirect("/signup?msg=signup_right");
        }
      });
      return true;
    }
    return res.redirect("/signup?msg=signup_wrong");
  });

  app.get("/smashes", checkAuth, function(req, res) {
    return db.users.find({
      email: req.user.email
    }, function(err, user) {
      return res.render("smashes", {
        user: user[0],
        scripts: ["js/test.js"]
      });
    });
  });

  /* REST API*/


  app.get("/matches", checkAuth, function(req, res) {
    var loggedin, search;
    search = req.query.search;
    loggedin = req.user;
    return db.users.findOne({
      email: search
    }, function(err, user) {
      var match, matches, _i, _len;
      matches = user.matches;
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        if (match.email === loggedin.email) {
          match.match = true;
          cc(loggedin);
          _.each(loggedin.matches, function(logged_match) {
            cc(logged_match);
            if (logged_match.email === search) {
              return logged_match.match = true;
            }
          });
          db.users.update({
            email: loggedin.email
          }, {
            $set: {
              matches: loggedin.matches
            }
          }, function() {
            return db.users.update({
              email: user.email
            }, {
              $set: {
                matches: matches
              }
            }, function() {
              return res.json({
                match: true
              });
            });
          });
          return true;
        }
      }
      return res.json({
        match: false
      });
    });
  });

  app.post("/matches", checkAuth, function(req, res) {
    var matches;
    matches = req.body.matches;
    cc("POSTING");
    return db.users.update({
      email: req.user.email
    }, {
      $set: {
        matches: matches
      }
    }, function(err, updated) {
      return res.json({
        success: true
      });
    });
  });

  app["delete"]("/matches/:matchid", function(req, res) {});

  app.get("/users", function(req, res) {
    var ignore;
    ignore = req.query.ignore;
    db.users.find({}, function(err, users) {
      var clean;
      clean = [];
      _.each(users, function(user) {
        if (!((ignore != null) && ignore.indexOf(user.email) !== -1)) {
          user.match_total = (_.filter(user.matches, function(matches) {
            return matches.match === true;
          })).length;
          clean.push(user);
          return true;
        }
        return cc("ignoring" + user.email);
      });
      if (!err) {
        return res.json(clean);
      } else {
        return res.json({
          success: false
        });
      }
    });
    return true;
  });

  app.get("/dev", function(req, res) {
    return db.users.update({}, {
      $set: {
        matches: []
      }
    }, {
      multi: true
    }, function() {
      return res.json({
        success: true
      });
    });
  });

}).call(this);
