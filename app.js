// Generated by CoffeeScript 1.6.3
(function() {
  var app, cc, checkAuth, db, express, temp, url;

  express = require('express');

  url = require('url');

  app = express();

  app.listen(process.env.PORT || 4040);

  checkAuth = function(req, res, next) {
    req.user = "samuel.purcell@tufts.edu";
    return next();
  };

  cc = function(arg) {
    return console.log(arg);
  };

  temp = "mongodb://heroku:192be8556a80da2574b29c0a48b37360@ethan.mongohq.com:10058/app17903256";

  db = require("mongojs").connect(temp || process.env.MONGOHQ_URL || "JumboSmash", ['users']);

  app.configure(function() {
    app.use(express.logger('dev'));
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    return app.use(express["static"](__dirname + '/public'));
  });

  app.get("/signup", function(req, res, next) {
    return res.render("signup");
  });

  app.post("/signup", function(req, res, next) {
    var click, email, year;
    click = req.body.submit_login;
    email = req.body.email.toLowerCase();
    year = parseInt(req.body.grad_year);
    if (typeof click !== "undefined") {
      db.users.find({
        email: email
      }, function(err, users) {
        if (users.length) {
          return res.redirect("/signup?msg=existing");
        } else {
          db.users.insert({
            email: email
          }, {
            $set: {
              email: email,
              grad_year: year
            }
          }, function(err, inserted) {
            if (err || !inserted) {
              return res.redirect("/signup?msg=signup_wrong");
            } else {

            }
          });
          return res.redirect("/signup?msg=signup_right");
        }
      });
      return true;
    }
    return res.redirect("/signup?msg=signup_wrong");
  });

  app.get("/smashes", function(req, res) {
    return db.users.find({
      email: 'samuel.purcell@tufts.edu'
    }, function(err, user) {
      cc(user);
      return res.render("smashes", {
        user: user[0],
        scripts: ["js/test.js"]
      });
    });
  });

  /* REST API*/


  app.get("/matches", checkAuth, function(req, res) {
    return db.users.find({
      email: req.user
    }, function(err, user) {
      return res.json(user);
    });
  });

  app.post("/matches/:matchid", function(req, res) {});

  app["delete"]("/matches/:matchid", function(req, res) {});

  app.get("/users", function(req, res) {
    db.users.find({}, {
      matches: 0
    }, function(err, users) {
      if (!err) {
        return res.json(users);
      } else {
        return res.json({
          success: false
        });
      }
    });
    return true;
  });

  app.get("/dev", function(req, res) {
    return db.users.update({
      email: "samuel.purcell@tufts.edu"
    }, {
      $set: {
        matches: ["grace.buchloh@tufts.edu, jack.watterson@tufts.edu"]
      }
    }, {
      multi: true
    }, function() {
      return res.json({
        success: true
      });
    });
  });

}).call(this);
